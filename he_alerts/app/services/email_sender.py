"""
Email sending service for alerts using SMTP.
"""
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import List, Optional
from datetime import datetime

from app.core.config import settings
from app.core.logging import get_logger

logger = get_logger(__name__)


class EmailSender:
    """
    Send alert emails via SMTP.
    """
    
    def __init__(self):
        # Use existing EMAIL settings as fallback for SMTP settings
        self.smtp_server = settings.SMTP_SERVER or settings.EMAIL_SMTP_SERVER
        self.smtp_port = settings.SMTP_PORT or settings.EMAIL_SMTP_PORT
        self.smtp_username = settings.SMTP_USERNAME or settings.EMAIL_SENDER
        self.smtp_password = settings.SMTP_PASSWORD or settings.EMAIL_PASSWORD
        self.from_email = settings.ALERT_FROM_EMAIL or settings.EMAIL_SENDER
        self.to_emails = settings.ALERT_TO_EMAILS
        self.bcc_emails = settings.ALERT_BCC_EMAILS
    
    async def send_alert_email(
        self,
        subject: str,
        html_content: str,
        text_content: Optional[str] = None,
        to_emails: Optional[List[str]] = None,
        bcc_emails: Optional[List[str]] = None
    ) -> bool:
        """
        Send an alert email.
        
        Args:
            subject: Email subject
            html_content: HTML content
            text_content: Plain text content (optional)
            to_emails: Override default recipients
            bcc_emails: Override default BCC recipients
            
        Returns:
            True if sent successfully
        """
        try:
            # Use provided recipients or defaults
            recipients = to_emails or self.to_emails
            bcc_recipients = bcc_emails or self.bcc_emails
            
            # Create message
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = self.from_email
            msg['To'] = ', '.join(recipients)
            
            # Add text and HTML parts
            if text_content:
                text_part = MIMEText(text_content, 'plain')
                msg.attach(text_part)
            
            html_part = MIMEText(html_content, 'html')
            msg.attach(html_part)
            
            # All recipients (to + bcc)
            all_recipients = recipients + bcc_recipients
            
            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg, to_addrs=all_recipients)
            
            logger.info(f"Alert email sent: {subject} to {len(all_recipients)} recipients")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send alert email: {e}")
            return False
    
    async def send_test_email(self) -> bool:
        """
        Send a test email to verify configuration.
        
        Returns:
            True if sent successfully
        """
        subject = f"HE Alerts Test Email - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        html_content = """
        <html>
        <body>
            <h2>HE Alerts Email Test</h2>
            <p>This is a test email from the HE Alerts system.</p>
            <p>If you received this email, your email configuration is working correctly.</p>
            <hr>
            <p><small>Generated by HE Alerts System</small></p>
        </body>
        </html>
        """
        
        text_content = """
        HE Alerts Email Test
        
        This is a test email from the HE Alerts system.
        If you received this email, your email configuration is working correctly.
        
        Generated by HE Alerts System
        """
        
        return await self.send_alert_email(
            subject=subject,
            html_content=html_content,
            text_content=text_content
        )